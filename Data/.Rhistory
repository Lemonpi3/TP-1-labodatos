geom_boxplot(outlier.shape = diamond) +
labs(title = "Boxplot de GDP per cápita por Continente",
x = "Continente",
y = "PIB per cápita ($)") +
theme_minimal()
# Crear el boxplot de diagrama de bigote
ggplot(data = gapminder, aes(x = continent, y = gdpPercap)) +
geom_boxplot(outlier.shape = "diamond") +
labs(title = "Boxplot de GDP per cápita por Continente",
x = "Continente",
y = "PIB per cápita ($)") +
theme_minimal()
continent_list <- unique(gapminder$continent)
for (continent in continent_list) {
data_subset <- gapminder %>%
filter(continent == continent)
avg_subset <- avg_lifeExp %>%
filter(continent == continent)
p <- ggplot(data = data_subset, aes(x = year, y = lifeExp)) +
geom_line() +
geom_line(data = avg_subset, aes(x = year, y = avg_lifeExp), color = "blue", size = 1.5) +
labs(title = paste("Expectativa de Vida por Año en", continent),
x = "Año",
y = "Expectativa de Vida") +
theme_minimal()
print(p)
}
continent_list <- unique(gapminder$continent)
for (continent in continent_list) {
data_subset <- gapminder %>%
filter(continent == continent)
avg_subset <- avg_lifeExp %>%
filter(continent == continent)
p <- ggplot(data = data_subset, aes(x = year, y = lifeExp)) +
geom_line() +
geom_line(data = avg_subset, aes(x = year, y = avg_lifeExp), color = "blue", size = 1.5) +
labs(title = paste("Expectativa de Vida por Año en", continent),
x = "Año",
y = "Expectativa de Vida") +
theme_minimal()
print(p)
}
library(gapminder)
library(ggplot2)
library(dplyr)
# Calcular la expectativa de vida promedio por año y continente
avg_lifeExp <- gapminder %>%
group_by(year, continent) %>%
summarise(avg_lifeExp = mean(lifeExp, na.rm = TRUE))
# Crear gráficos de línea por continente
continent_list <- unique(gapminder$continent)
for (continent in continent_list) {
data_subset <- gapminder %>%
filter(continent == continent)
avg_subset <- avg_lifeExp %>%
filter(continent == continent)
p <- ggplot(data = data_subset, aes(x = year, y = lifeExp)) +
geom_line() +
geom_line(data = avg_subset, aes(x = year, y = avg_lifeExp), color = "blue", size = 1.5) +
labs(title = paste("Expectativa de Vida por Año en", continent),
x = "Año",
y = "Expectativa de Vida") +
theme_minimal()
print(p)
}
palmerpenguins
penguins
install.packages(palmerpenguins)
install.packages("palmerpenguins")
penguins
penguins
install.packages("palmerpenguins")
write('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', file = "~/.Renviron", append = TRUE)
install.packages("palmerpenguins")
write('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', file = "~/.Renviron", append = TRUE)
PATH="${RTOOLS40_HOME}"
PATH
PATH = ${RTOOLS40_HOME}
install.packages("palmerpenguins")
nrows(penguins)
penguins
palmerpenguins
install.packages("palmerpenguins")
library(palmerpenguins)
penguins
nrow(penguins)
ncol(penguins)
penguins_clean = penguins[!is,na(penguins$bill_depth_mm),]
penguins_clean = penguins[!is.na(penguins$bill_depth_mm),]
penguins_clean
mean(penguins_clean$bill_depth_mm)
sd(penguins_clean$bill_depth_mm)
devolver_moda = function(x){
tabla_frecuencias = table(x)
numero_columna = which.max(tabla_frecuencias)
nombres_tabla_frecuencias = names(tabla_frecuencias)
return(nombres_tabla_frecuencias[numero_columna])
}
colores <- as.factor(c('red', 'green', 'red', 'black', 'yellow' ,'green', 'blue','green','blue', 'blue','green'))
devolver_moda(colores)
devolver_moda(penguins_clean$bill_depth_mm)
devolver_moda(to.factor(penguins_clean$bill_depth_mm)
devolver_moda(to.factor(penguins_clean$bill_depth_mm))
ggplot(data = penguins, aes(x = bill_length_mm, y = bill_depth_mm)) +
geom_point() +
labs(title = "Scatterplot de Bill Depth vs. Bill Length",
x = "Bill Length (mm)",
y = "Bill Depth (mm)") +
theme_minimal()
library(ggplot2)
library(palmerpenguins)
library(ggplot2)
# Crear el scatterplot
ggplot(data = penguins, aes(x = bill_length_mm, y = bill_depth_mm)) +
geom_point() +
labs(title = "Scatterplot de Bill Depth vs. Bill Length",
x = "Bill Length (mm)",
y = "Bill Depth (mm)") +
theme_minimal()
library(palmerpenguins)
library(ggplot2)
# Crear el box plot
ggplot(data = penguins, aes(x = species, y = bill_depth_mm)) +
geom_boxplot(fill = "lightblue") +
labs(title = "Box Plot de Bill Depth por Especie",
x = "Especie",
y = "Bill Depth (mm)") +
theme_minimal()
ggplot(data = penguins , aes(x=species, y=bill_depth_mm)) +
geom_point()
ggplot(data = penguins , aes(x=bill_length_mm, y=bill_depth_mm)) +
geom_point()
ggplot(data = penguins , aes(x=species, y=bill_depth_mm)) +  geom_barplot()
ggplot(data = penguins , aes(x=species, y=bill_depth_mm)) +  geom_boxplot()
ggplot(data = penguins , aes(x=species, y=bill_depth_mm)) +  geom_boxplot() + na.rm(TRUE)
ggplot(data = penguins , aes(x=species, y=bill_depth_mm), na.rm = TRUE) +  geom_boxplot()
ggplot(data = penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
geom_line() +
labs(title = "Gráfico de Línea de Body Mass vs. Flipper Length",
x = "Flipper Length (mm)",
y = "Body Mass (g)") +
theme_minimal()
ggplot(data = penguins , aes(x=bill_length_mm, y=bill_depth_mm)) +  geom_point()
ggplot(data = penguins , aes(x=bill_length_mm, y=bill_depth_mm)) +  geom_point() + geom_smooth(method = lm)
ggplot(data = penguins , aes(x=bill_length_mm, y=bill_depth_mm, colour = bill_depth_mm)) +  geom_point() + geom_smooth(method = lm)
data.edu <- data.frame(id = 1:100,
edu = sample(x = c("primario","secundario","universitario"),
size = 100,
replace = T,
prob = c(0.1, 0.5, 0.4)))
head(data.edu)
head(data.edu,10)
ggplot(data = data.edu, aes(x = edu, y = id)) +
geom_barplot() #+
library("tidyverse")
ggplot(data = data.edu, aes(x = edu, y = id)) +
geom_barplot() #+
ggplot(data = data.edu, aes(x = edu, y = id)) +
geom_bar() #+
ggplot(data = data.edu, aes(x = edu)) +
geom_bar() #+
#  labs(title = "Boxplot de GDP per cápita por Continente",
#       x = "Continente",
#       y = "PIB per cápita ($)") +
#  theme_minimal()
ggplot(data = data.edu, aes(x = edu)) +
geom_bar()
+ labs(title = "Bar plot Nivel educativo",
x = "Cantidad (Count de filas)",
y = "Tipo de institucion") #+
ggplot(data = data.edu, aes(x = edu)) +
geom_bar()
+ labs(title = "Bar plot Nivel educativo", x = "Cantidad (Count de filas)", y = "Tipo de institucion") #+
ggplot(data = data.edu, aes(x = edu)) +
geom_bar() +
labs(title = "Bar plot Nivel educativo", x = "Cantidad (Count de filas)", y = "Tipo de institucion")
#+
#  theme_minimal()
# datos de altura y mes de vida de un bebé.
ggplot(data=data.alturas, aes(x=mes, y=altura))
# datos de altura y mes de vida de un bebé.
data.alturas <- data.frame(mes = c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12),
altura = c(50, 55, 57, 61, 62, 63, 64, 66, 68, 69, 71, 73, 75))
# datos de altura y mes de vida de un bebé.
data.alturas <- data.frame(mes = c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12),
altura = c(50, 55, 57, 61, 62, 63, 64, 66, 68, 69, 71, 73, 75))
# datos de altura y mes de vida de un bebé.
ggplot(data=data.alturas, aes(x=mes, y=altura))
+ geom_line()
# datos de altura y mes de vida de un bebé.
ggplot(data=data.alturas, aes(x=mes, y=altura)) + geom_line()
# datos de altura y mes de vida de un bebé.
ggplot(data=data.alturas, aes(x=mes, y=altura)) + geom_line() + labs(title"Altura vs tiempo de un bebé", x="Altura", y="Mes")
# datos de altura y mes de vida de un bebé.
ggplot(data=data.alturas, aes(x=mes, y=altura)) + geom_line() + labs(title = "Altura vs tiempo de un bebé", x="Altura", y="Mes")
# los datos del experimento que mide la velocidad de la luz estan en el data frame
# "morley" que viene en R. ¿qué columnas tiene?
data.luz <- morley
# los datos del experimento que mide la velocidad de la luz estan en el data frame
# "morley" que viene en R. ¿qué columnas tiene?
data.luz <- morley
head(data.luz)
# los datos del experimento que mide la velocidad de la luz estan en el data frame
# "morley" que viene en R. ¿qué columnas tiene?
data.luz <- morley
names(data.luz)
# los datos del experimento que mide la velocidad de la luz estan en el data frame
# "morley" que viene en R. ¿qué columnas tiene?
data.luz <- morley
head(data.luz)
# los datos del experimento que mide la velocidad de la luz estan en el data frame
# "morley" que viene en R. ¿qué columnas tiene?
data.luz <- morley
head(data.luz,15)
ggplot(data.luz, aes = (x=run, y=speed)) + plot_histogram()
ggplot(data.luz, aes = (x=run, y=speed)) + plot_histogram()
ggplot(data = data.luz, aes = (x=run, y=speed)) + plot_histogram()
ggplot(data = data.luz, aes = (x=Run, y=Speed)) + plot_histogram()
ggplot(data = data.luz, aes = (x = Run, y = Speed)) + plot_histogram()
ggplot(data = data.luz, aes (x = Run, y = Speed)) + plot_histogram()
library("tidyverse")
ggplot(data = data.luz, aes (x = Run, y = Speed)) + plot_histogram()
library("tidyverse")
ggplot(data = data.luz, aes (x = Run, y = Speed)) + geom_histogram()
library("tidyverse")
ggplot(data = data.luz, aes(x = Speed)) + geom_histogram()
ggplot(data = data.luz, aes(x = Expt, y = Speed)) + geom_boxplot()
ggplot(data = data.luz, aes(x = Speed)) + geom_boxplot()
ggplot(data = data.luz, aes(x = Speed, grouping(Expt))) + geom_boxplot()
library("tidyverse")
ggplot(data = data.luz, aes(x = Speed, grouping(Expt))) + geom_boxplot()
ggplot(data = morley, aes(x = Expt, y = Speed)) +
geom_boxplot()
ggplot(data = morley, aes(x = factor(Expt), y = Speed)) +
geom_boxplot() +
facet_wrap(~ Expt, scales = "free_x")
?factor()
# datos de la preferencia por Maradona-Messi de 43 personas hipotéticas:
data.futbol <- data.frame(mejor = c("maradona", "messi"),
n     = c(20, 23))
# datos de la preferencia por Maradona-Messi de 43 personas hipotéticas:
data.futbol <- data.frame(mejor = c("maradona", "messi"),
n     = c(20, 23))
ggplot(data=data.futbol ,  aes(x=mejor)) + geom_bar()
# datos de la preferencia por Maradona-Messi de 43 personas hipotéticas:
data.futbol <- data.frame(mejor = c("maradona", "messi"),
n     = c(20, 23))
ggplot(data=data.futbol ,  aes(x=mejor, y=n)) + geom_bar()
# datos de la preferencia por Maradona-Messi de 43 personas hipotéticas:
data.futbol <- data.frame(mejor = c("maradona", "messi"),
n     = c(20, 23))
ggplot(data=data.futbol ,  aes(x=mejor, y=n)) + geom_bar()
# datos de la preferencia por Maradona-Messi de 43 personas hipotéticas:
data.futbol <- data.frame(mejor = c("maradona", "messi"),
n     = c(20, 23))
ggplot(data=data.futbol ,  aes(x=mejor)) + geom_bar()
head(data.futbol)
# datos de la preferencia por Maradona-Messi de 43 personas hipotéticas:
data.futbol <- data.frame(mejor = c("maradona", "messi"),
n     = c(20, 23))
ggplot(data=data.futbol ,  aes(x=mejor, y=n))
# datos de la preferencia por Maradona-Messi de 43 personas hipotéticas:
data.futbol <- data.frame(mejor = c("maradona", "messi"),
n     = c(20, 23))
ggplot(data=data.futbol ,  aes(x=mejor, y=n)) + geom_bar
# datos de la preferencia por Maradona-Messi de 43 personas hipotéticas:
data.futbol <- data.frame(mejor = c("maradona", "messi"),
n     = c(20, 23))
ggplot(data=data.futbol ,  aes(x=mejor, y=n)) + geom_bar()
# datos de la preferencia por Maradona-Messi de 43 personas hipotéticas:
library(ggplot2)
data.futbol <- data.frame(mejor = c("maradona", "messi"),
n     = c(20, 23))
ggplot(data = data.futbol, aes(x = mejor, y = n)) +
geom_point()
ggplot(data = data.futbol, aes(x = mejor, y = n)) +
geom_bar(stat = "identity")
# datos de horas de sueño y consumo de café
cafe = runif(100, min = 0, max = 3)
dormir = rnorm(100, mean = 8) - cafe
data.cafe <- data.frame(cafe, dormir)
ggplot(data=data.cafe, aes(x=cafe, y= dormir)) + geom_scatter()
# datos de horas de sueño y consumo de café
cafe = runif(100, min = 0, max = 3)
dormir = rnorm(100, mean = 8) - cafe
data.cafe <- data.frame(cafe, dormir)
ggplot(data=data.cafe, aes(x=cafe, y= dormir)) + geom_point()
# datos de horas de sueño y consumo de café
cafe = runif(100, min = 0, max = 3)
dormir = rnorm(100, mean = 8) - cafe
data.cafe <- data.frame(cafe, dormir)
ggplot(data=data.cafe, aes(x=cafe, y= dormir)) + geom_point() +   geom_hline(yintercept = mean(data.cafe$dormir), color = "red", linetype = "dashed") +
geom_vline(xintercept = mean(data.cafe$cafe), color = "blue", linetype = "dashed")
# datos de horas de sueño y consumo de café
cafe = runif(100, min = 0, max = 3)
dormir = rnorm(100, mean = 8) - cafe
data.cafe <- data.frame(cafe, dormir)
ggplot(data=data.cafe, aes(x=cafe, y= dormir)) + geom_point() +
geom_smooth()
library(datos)
install.packages("datos")
library(datos)
library(datos)
head(millas)
library(datos)
head(millas)
library(datos)
head(millas)
View(millas)?millas
?millas
ggplot(data = millas, aes(x = cilindrada, y = consumo)) +
geom_point(shape = 2, color = "pink") + # Usamos shape 2 para un triángulo, y especificamos el color rosa
ggplot(data = millas, aes(x = cilindrada, y = consumo)) +
geom_point(shape = 2, color = "pink") # Usamos shape 2 para un triángulo, y especificamos el color rosa
ggplot(data = millas, aes(x = cilindrada, y = autopista)) +
geom_point(shape = 2, color = "pink") # Usamos shape 2 para un triángulo, y especificamos el color rosa
ggplot(millas, aes(x=cilindrada, y=autopista, fill = cilindrada < 5)) +
geom_point(shape = 24, size = 4) + theme_classic()
ggplot(data = millas, aes(x = cilindrada, y = autopista)) +
geom_point(shape = 2, color = "pink") + theme_classic()
ggplot(millas, aes(x = cilindrada, y = autopista, condicion_personalizada = cilindrada < 5)) +
geom_point(shape = 24, size = 4) + theme_classic()
ggplot(millas, aes(x=cilindrada, y=autopista, fill = cilindrada < 5)) +
geom_point(shape = 24, size = 4) + theme_classic()
ggplot(millas, aes(x=cilindrada, y=autopista, fill = cilindrada < 5)) +
geom_point(shape = 24, size = 4) + theme_classic()
ggplot(millas, aes(x=cilindrada, y=autopista, cualquier_nombre = cilindrada < 5)) +
geom_point(shape = 24, size = 4) + theme_classic()
ggplot(millas, aes(x=cilindrada, y=autopista, fill = cilindrada < 5)) +
geom_point(shape = 24, size = 4) + theme_classic()
#1.6 Reproducir el siguiente grafico y agregarle título, subtítulo, caption. Cambiarle el label del eje x y del eje y.
ggplot(data=millas, aes(x=cilindrada, y=autopista)) + geom_point()
#1.6 Reproducir el siguiente grafico y agregarle título, subtítulo, caption. Cambiarle el label del eje x y del eje y.
ggplot(data=millas, aes(x=cilindrada, y=autopista, colour= traccion)) + geom_point()
#1.6 Reproducir el siguiente grafico y agregarle título, subtítulo, caption. Cambiarle el label del eje x y del eje y.
ggplot(data=millas, aes(x=cilindrada, y=autopista, colour= traccion)) + geom_point()
+ geom_line()
#1.6 Reproducir el siguiente grafico y agregarle título, subtítulo, caption. Cambiarle el label del eje x y del eje y.
ggplot(data=millas, aes(x=cilindrada, y=autopista, colour= traccion)) + geom_point() + geom_line()
#1.6 Reproducir el siguiente grafico y agregarle título, subtítulo, caption. Cambiarle el label del eje x y del eje y.
ggplot(data=millas, aes(x=cilindrada, y=autopista, colour= traccion)) + geom_point() + geom_line() + theme_classic()
ggplot(data = millas, aes(x = cilindrada, y = autopista, color = traccion)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, aes(group = traccion)) +
theme_classic()
ggplot(data=millar, aes(x=ciudad)) + geom_histogram()
ggplot(data=milla, aes(x=ciudad)) + geom_histogram()
ggplot(data=millas, aes(x=ciudad)) + geom_histogram()
ggplot(data=millas, aes(x=autopista)) + geom_histogram()
ggplot(data = millas, aes(x = traccion, y = autopista)) +
geom_boxplot() +
theme_classic()
#1.8 Hacer un boxplot del consumo discriminado por tracción. Es decir, 3 boxplots. ¿Cuál es la tracción que menos consume?
ggplot(data = millas, aes(x = traccion, y = autopista)) +
geom_boxplot() +
theme_classic()
factor(cilindrada)
factor(millas$cilindrada)
millas$cilindrada
ggplot(data=millas, aes(x=cilindrada, y=autopista)) + geom_point()
ggplot(data=millas, aes(x=cilindrada, y=autopista)) + geom_point() + geom_smooth()
ggplot(data=millas, aes(x=cilindrada, y=autopista)) + geom_point() + geom_smooth(method="lm")
ggplot(data=millas, aes(x=cilindrada, y=autopista)) + geom_plot(method="aes", group_by(traccion))
ggplot(data=millas, aes=(x=cilindrada, y=autopista)) + geom_plot(method="aes", group_by(traccion))
ggplot(data=millas, aes(x=cilindrada,y=autopista)) + geom_plot(method="aes",group_by(traccion))
ggplot(data=millas, aes(x=cilindrada,y=autopista)) + geom_smooth(method="aes",group_by(traccion))
ggplot(data=millas, aes(x=cilindrada,y=autopista)) + geom_smooth(method="aes",group_by(millas$traccion))
ggplot(data=millas, aes(x=cilindrada,y=autopista)) + geom_smooth(method="aes",group_by(factor(millas$traccion))
ggplot(data=millas, aes(x=cilindrada,y=autopista)) + geom_smooth(method="aes",group_by(traccion))
ggplot(data=millas, aes(x=cilindrada,y=autopista)) + geom_smooth(method="aes",group_by(millas$traccion))
ggplot(data=millas, aes(x=cilindrada,y=autopista)) + geom_smooth(method="aes",group_by(factor(millas$traccion)))
ggplot(data=millas, aes(x=cilindrada,y=autopista)) + geom_smooth(method="aes", aes(group=traccion)))
ggplot(data=millas, aes(x=cilindrada,y=autopista)) + geom_smooth(method="aes", aes(group=traccion))
ggplot(data = millas, aes(x = cilindrada, y = autopista, color = traccion)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, aes(group = traccion)) +
theme_classic()
ggplot(data = millas, aes(x = cilindrada, y = autopista)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, aes(group = traccion)) +
theme_classic()
ggplot(data = millas, aes(x = cilindrada, y = autopista)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
theme_classic()
ggplot(data = millas, aes(x = cilindrada, y = autopista, colour=traccion)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
theme_classic()
ggplot(data = millas, aes(x = cilindrada, y = autopista, colour=traccion)) +
geom_point() +
geom_smooth(method = "lm") +
theme_classic()
ggplot(data = millas, aes(x = cilindrada, y = autopista, colour=traccion)) +
geom_point() +
geom_line(method = "lm") +
theme_classic()
ggplot(data = millas, aes(x = cilindrada, y = autopista, colour=traccion)) +
geom_point() +
geom_smooth(method = "lm") +
theme_classic()
library(ggplot2)
ggplot(data = millas, aes(x = cilindrada, y = autopista, colour = traccion)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "black") + # Línea única en color negro
theme_classic()
ggplot(millas, aes(x = cilindrada, y = autopista)) +
geom_point() +
theme_bw() +
facet_grid(traccion~cilindros)
?facet_wrap
View(avg_lifeExp)
library("penguins")
library("palmerpenguins")
head(penguins)
filter(penguins, island = 'isla Biscoe')
pinguinos_subset = penguins %<% filter (island == "Biscoe", bill_length_mm >= 48)
library(dplyr)
library(dplyr)
head(pinguinos_subset)
pinguinos_subset <- penguins %<% filter (island == "Biscoe", bill_length_mm >= 48)
pinguinos_subset <- penguins %>% filter (island == "Biscoe", bill_length_mm >= 48)
head(pinguinos_subset)
head(pinguinos_adeile_machos_no_2008)
pinguinos_adeile_machos_no_2008 = penguins %>% filter(species == "Adelie", sex == 'male', year != 2008 )
pinguinos_adeile_machos_no_2008 <- penguins %>% filter(species == "Adelie", sex == 'male', year != 2008 )
head(pinguinos_adeile_machos_no_2008)
pinguinos_adeile_machos_no_2008 = penguins %>% filter(species == "Adelie", sex == 'male', year != 2008 )
head(pinguinos_adeile_machos_no_2008)
head(pinguinos_adeile_machos_no_2008)
names(pengins)
names(penguins)
head(penguins_select)
penguins_select = penguins %>% select(-year, -sex, -body_mass_g)
head(penguins_select)
resultado = penguins %>% filter(flipper_length_mm > 200) %>% select(ends_with(names(penguins),"mm")
resultado = penguins %>% filter(flipper_length_mm > 200) %>% select(ends_with(names(penguins),"mm")
head(resultado)
resultado = penguins %>% filter(flipper_length_mm > 200) %>% select(ends_with(names(penguins),"mm")
head(resultado)
resultado = penguins %>% filter(flipper_length_mm > 200) %>% select(names(penguins) %>% ends_with("mm"))
resultado = penguins %>% filter(flipper_length_mm > 200) %>% select(ends_with("mm"))
resultado = penguins %>% filter(flipper_length_mm > 200) %>% select(ends_with("mm"))
head(resultado)
res_2 = penguins %>% filter(island = 'Dream')
res_2 = penguins %>% filter(island == 'Dream')
res_2
res_2 = penguins %>% filter(island == 'Dream') %>% select(species, starts_with("bill"))
res_2 = penguins %>% filter(island == 'Dream') %>% select(species, starts_with("bill"))
res_2
res_3 = penguins %>% rename_with(toupper, starts_with("bill"))
res_3
res_4 = penguins %>% mutate( species = as.character(species),  weight_kg = body_mass_g / 1000,  island = tolower(island))
res_4
summary_table
summary_table
summary_table <- penguins %>%
group_by(species, year) %>%  # Agrupar por especie y año
summarize(bill_depth_mean = mean(bill_depth_mm),
bill_length_mean = mean(bill_length_mm))
summary_table
summary_table1 <- penguins %>%
filter(species == "Adelie") %>%  # Filtrar por especie Adelie
group_by(island) %>%  # Agrupar por isla
summarize(Min_Flipper_Length = min(flipper_length_mm),
Max_Flipper_Length = max(flipper_length_mm))
summary_table1
summary_table2 <- penguins %>%
group_by(species, year) %>%  # Agrupar por especie y año
summarize(bill_depth_mean = mean(bill_depth_mm),
bill_length_mean = mean(bill_length_mm))
summary_table2
summary_table3 <- penguins %>%
mutate(bill_ratio = bill_length_mm / bill_depth_mm) %>% # Crear la columna bill_ratio
select(species, bill_ratio) %>% # Seleccionar solo las columnas species y bill_ratio
group_by(species) %>% # Agrupar por especie
summarize(bill_ratio_mean = mean(bill_ratio)) # Calcular el promedio de bill_ratio y renombrar la columna
summary_table3
penguins2 <- penguins %>%
rename(masa_corporal_g = body_mass_g)
penguins2
View(read_csv('Data/Bicis_limpio.csv'))
#Bicis
df_bici = read_csv('Data/trips_2022_reducido.csv')
install.packages("tidyverse")
library(tidyverse)
View(read_csv('Data/Bicis_limpio.csv'))
# Obtén la ruta del directorio del script actual
ruta_script <- dirname(rstudioapi::getActiveDocumentContext()$path)
# Construye las rutas a los archivos y directorios relativos
ruta_data <- file.path(ruta_script, '..', 'Data')
ruta_entrada <- file.path(ruta_data, 'trips_2022_reducido.csv')
ruta_salida <- file.path(ruta_data, 'Bicis_limpio.csv')
# Carga el archivo de entrada
df_bici <- read_csv(ruta_entrada)
# Procesa los datos
df_bici <- df_bici %>%
filter(duracion_recorrido >= 300 & duracion_recorrido <= 3600) %>%
mutate(
Género = if_else(is.na(Género), "OTHER", Género),
nombre_estacion_origen = gsub('\\.','. ',nombre_estacion_origen),
nombre_estacion_destino = gsub('\\.','. ',nombre_estacion_destino),
nombre_estacion_origen = str_to_title(nombre_estacion_origen),
nombre_estacion_destino = str_to_title(nombre_estacion_destino)
) %>%
select(-X.1, -X, -id_estacion_origen, -direccion_estacion_origen, -id_estacion_destino, -direccion_estacion_destino)
# Cambia al directorio donde se guardará el archivo de salida
setwd(ruta_data)
# Guarda el archivo procesado
write.csv(df_bici, file = ruta_salida, row.names = FALSE)
# Visualiza el archivo procesado
View(read_csv(ruta_salida))
